CS50 - Problem Set 5 (pset5)
James Dreher
james.d.dreher@gmail.com

0.  What is pneumonoultramicroscopicsilicovolcanoconiosis?
-   According to Wikipedia, it is a lung disease that is otherwise known as silicosis. 
-   It is the longest word in the English language published in the Oxford English Dictionary

1.  According to its man page, what does getrusage do?
-   Provides us with the resources used to runs the associated processes
-   Accepts two arguments which are an 'int' and a 'struct rusage'

2.  Per that same man page, how many members are in a variable of type struct rusage?
-   16

3.  Why do you think we pass before and after by reference (instead of by value) to calculate, even though we’re not changing their contents?
-   To save memory since the malloc() call would be too large
-   Also couldn't get 'speller' to compile when passing by value

4.  Explain as precisely as possible, in a paragraph or more, how main goes about reading words from a file. 
    In other words, convince us that you indeed understand how that function’s for loop works.
-   Each word is read-in a character at a time until the return character is reached
-   Each word is then copied to a string and hashed to be placed in its appropriate linked-list from the hash table
-   The wordcount variable is increased as well, instead of having a function to traverse through each linked-list
-   Hash is done based on the first character of the word (not efficient, proof of concept though without relying on external lib)

5.  Why do you think we used fgetc to read each word’s characters one at a time rather than use fscanf with a format string like "%s" to read whole words at a time? 
    Put another way, what problems might arise by relying on fscanf alone?
-   To account for special input characters like unicode or numbers, which are invalid, as they need to be letters or an apostrophe
-   Hashing function accounts for these by placing them in hashtable[0], mainly as error checking my own implementation

6.  Why do you think we declared the parameters for check and load as const?
-   Since the values within the textfile are static we don't want their values to change
-   This complicated my hashfunction() method when uppercase letters were used, but I was able to workaround it by adding ASCSII values appropriately

7.  What data structure(s) did you use to implement your spell-checker? Be sure not to leave your answer at just "hash table," "trie," or the like. 
    Expound on what’s inside each of your "nodes."
-   I used a hash table to seperate my dictionary into 28 entities of linked lists, which allowed my to achevie O(log(n)) running time
-   Hashtable at 0 is for error checking, 1-26 for A-Z, and 27 for the apostrophe character
-   Inside in each node I have a value for the word itself (char word[LENGTH+1];), as well as pointers to the next node (struct node* next;), if not to NULL
-   Defined in the 'dictionary.h' header file

8.  How slow was your code the first time you got it working correctly?
-   The first time I ran my code it was 54 seconds against the "valgrind --leak-check=full ./speller texts/austinpowers.txt" command

9.  What kinds of changes, if any, did you make to your code in order to improve its performance?
-   Tried to keep performance in mind from the start, also per Zamayla's YouTube walkthrough the wordcount was implemented within the load() function
-   Using ++wordcount instead of something like wordcount = wordcount + 1, or even wordcount++
-   Using the strings.h and string.h libraries instead of comparing values, in particular the strcasecmp and strcmp functions

10. Do you feel that your code has any bottlenecks that you were not able to chip away at?
-   The unload() function could be written more effeciently I'm sure

#